#include <Wire.h>
#include "LiquidCrystal_I2C.h"  // Libreria per il display I2C
#include <math.h>


// Definizione dei pin
#define FAN_PIN 9 // Pin PWM per la ventola
#define THERMISTOR_X A0
#define THERMISTOR_Y A1
#define THERMISTOR_Z A2
#define THERMISTOR_E A3
#define LM7812 A6
#define PT100 A7

// Inizializzazione del display
LiquidCrystal_I2C lcd(0x27,20,4);

// Variabili per il tempo
unsigned long previousMillis = 0;
unsigned long displayMillis  = 0;
const long displayInterval   = 2000; // Cambia pagina ogni 2sec

unsigned int FanSpeed = 0;
unsigned int oldFanSpeed = 0;

int page = 0;

// Lettura termistore
double readThermistor(int pin)
{
  int rawValue = analogRead(pin);
  double resistance = (1023.0 / rawValue - 1) * 100000; // Calcola resistenza
  return (1 / (log(resistance / 100000.0) / 3950 + 1 / 298.15)) - 273.15; // Converti in Celsius
}

// Funzione per controllare la ventola
void controlFan(double temp)
{
  if (temp > 45)
    FanSpeed = 255;		// 100%
  else if (temp > 30 && temp < 40)
    FanSpeed = 128;		//  50%
  else if (temp < 25)
    FanSpeed = 0;		//   0%
  
  if ( FanSpeed != oldFanSpeed )
  {
	analogWrite(FAN_PIN, FanSpeed);
	oldFanSpeed = FanSpeed;
  }
}

// Funzione per aggiornare il display
void updateDisplay()
{
  lcd.clear();
  
  switch (page)
  {
    case 0:{
      lcd.setCursor(1, 0); lcd.print("Sistema  controllo");
      lcd.setCursor(1, 1); lcd.print("temperature scheda ");
      lcd.setCursor(6, 2); lcd.print("CREALITY");
      lcd.setCursor(0, 3); lcd.print("by Brombe (11/2024)");
      break;
      }
    case 1:{
      lcd.setCursor(0, 0); lcd.print("Driver X");
      lcd.setCursor(0, 1); lcd.print("Driver Y");
      lcd.setCursor(0, 2); lcd.print("Driver Z");
      lcd.setCursor(0, 3); lcd.print("Driver E");

      // Leggi la temperatura dal termistore X
      double tempX = readThermistor(THERMISTOR_X);
      tempX = map (tempX, 0, 1023, 0, 5000);                // trasformo la lettura di A0 in mV
      double NTC_X = 1000.0f / ((5000.0 / tempX) -1.0f );   // 1000 corrisponde al valore della resistenza da 1 Kohm tra i 5v e A0, il ermistore è collegato tra A0 e GND.
      double C_X  = map (NTC_X, 12345.6, 8.28, 0.0, 100.0);  // traduco il partitore di tensione in codice per calcolare la resistenza del termistore

      // Leggi la temperatura dal termistore Y
      double tempY = readThermistor(THERMISTOR_Y);
      tempY = map (tempY, 0, 1023, 0, 5000);               
      double NTC_Y = 1000.0f / ((5000.0 / tempY) -1.0f );        
      double C_Y  = map (NTC_Y, 6.49, 321.4, 0.0, 100.0);

      // Leggi la temperatura dal termistore Z
      double tempZ = readThermistor(THERMISTOR_Z);
      tempZ = map (tempZ, 0, 1023, 0, 5000);  
      double NTC_Z = 1000.0f / ((5000.0 / tempZ) -1.0f );        
      double C_Z  = map (NTC_Z, 6.49, 321.4, 0.0, 100.0);  

      // Leggi la temperatura dal termistore E
      double tempE = readThermistor(THERMISTOR_E);
      tempE = map (tempE, 0, 1023, 0, 5000);
      double NTC_E = 1000.0f / ((5000.0 / tempE) -1.0f );
      double C_E  = map (NTC_E, 6.49, 321.4, 0.0, 100.0);
	  
	  // Stampa la temperatura a metà della PRIMA riga
      lcd.setCursor(12, 0); // Imposta il cursore a metà della prima riga
      lcd.print(NTC_X, 1);  // Stampa la temperatura con 1 decimale
      lcd.setCursor(19, 0); // Imposta il cursore alla fine della prima riga
      lcd.print("C");       // Aggiungi l'unità di misura
	  
      // Stampa la temperatura a metà della SECONDA riga
      lcd.setCursor(12, 1); // Imposta il cursore a metà della seconda riga
      lcd.print(NTC_Y, 1);  // Stampa la temperatura con 1 decimale
      lcd.setCursor(19, 1); // Imposta il cursore alla fine della seconda riga
      lcd.print("C");       // Aggiungi l'unità di misura
	  
      // Stampa la temperatura a metà della TERZA riga
      lcd.setCursor(12, 2); // Imposta il cursore a metà della terza riga
      lcd.print(NTC_Z, 1);  // Stampa la temperatura con 1 decimale
      lcd.setCursor(19, 2); // Imposta il cursore alla fine della terza riga
      lcd.print("C");       // Aggiungi l'unità di misura
	  
      // Stampa la temperatura a metà della QUARTA riga
      lcd.setCursor(12, 3); // Imposta il cursore a metà della quarta riga
      lcd.print(NTC_E, 1);  // Stampa la temperatura con 1 decimale
      lcd.setCursor(19, 3); // Imposta il cursore alla fine della quarta riga
      lcd.print("C");       // Aggiungi l'unità di misura
      break;
      }
    case 2:{
      lcd.setCursor(0, 0);
	  lcd.print("LM7812");
      lcd.setCursor(0, 1);
	  lcd.print("BOX");
      lcd.setCursor(0, 3); 
      lcd.print("FAN Speed: ");
      int velFAN = map(FanSpeed, 0, 255, 0, 100);
      lcd.print(velFAN);
      lcd.print("%");
      break;
      }
  }
}

void setup()
{
  lcd.begin(20, 4); // Inizializza il display
  lcd.backlight(); // Accendi la retroilluminazione
  pinMode(FAN_PIN, OUTPUT);
}

void loop()
{
  unsigned long currentMillis = millis();
  
  // Aggiornamento display
  if (currentMillis - displayMillis >= displayInterval)
  {
    displayMillis = currentMillis;
    updateDisplay();
    page = (page + 1) % 3; // Cicla attraverso le pagine
  }
}
